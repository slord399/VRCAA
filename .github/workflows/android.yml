name: Publish release

on:
  push:
    branches: [ "transcript" ]
  pull_request:
    branches: [ "transcript" ]

jobs:
  build:
    permissions: write-all
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: gradle

    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
      
    - name: Build Release with Gradle
      run: ./gradlew assembleRelease

    - name: Rename built apk(s)
      run: mv app/build/outputs/apk/standard/release/app-standard-release.apk app/build/outputs/apk/standard/release/VRCAA.apk &&
           mv app/build/outputs/apk/quest/release/app-quest-release.apk app/build/outputs/apk/quest/release/VRCAA-quest.apk

    - name: Setup build tool version variable
      shell: bash
      run: |
        BUILD_TOOL_VERSION=$(ls /usr/local/lib/android/sdk/build-tools/ | tail -n 1)
        echo "BUILD_TOOL_VERSION=$BUILD_TOOL_VERSION" >> $GITHUB_ENV
        echo Last build tool version is: $BUILD_TOOL_VERSION

    - name: Sign app APK (Standard)
      uses: r0adkll/sign-android-release@v1
      id: sign_standard
      with:
        releaseDirectory: app/build/outputs/apk/standard/release
        signingKeyBase64: ${{ secrets.SIGNING_KEY }}
        alias: ${{ secrets.ALIAS }}
        keyStorePassword: ${{ secrets.KEY_STORE_PASSWORD }}
        keyPassword: ${{ secrets.KEY_PASSWORD }}
      env:
        BUILD_TOOLS_VERSION: ${{ env.BUILD_TOOL_VERSION }}

    - name: Sign app APK (Quest)
      uses: r0adkll/sign-android-release@v1
      id: sign_quest
      with:
        releaseDirectory: app/build/outputs/apk/quest/release
        signingKeyBase64: ${{ secrets.SIGNING_KEY }}
        alias: ${{ secrets.ALIAS }}
        keyStorePassword: ${{ secrets.KEY_STORE_PASSWORD }}
        keyPassword: ${{ secrets.KEY_PASSWORD }}
      env:
        BUILD_TOOLS_VERSION: ${{ env.BUILD_TOOL_VERSION }}


    - name: Generate CalVer version
      id: calver
      run: |
          TODAY=$(date "+%Y-%m-%d")

          RELEASE_TAG=$(gh release --repo ${{github.repository}} view --json tagName --jq .tagName)
          if [ "${RELEASE_TAG}" = "" ]; then
            RELEASE_TAG="${TODAY}_0"
            echo "There is no release, use ${RELEASE_TAG}"
          fi

          TAGS=(${RELEASE_TAG//_/ })
          MAJOR_VERSION=${TAGS[0]}
          PATCH_VERSION=${TAGS[1]}

          PREFIX="${VERSION_PREFIX}${TODAY}"
          if [ "${MAJOR_VERSION}" = "${PREFIX}" ]; then
            PATCH_VERSION=$(expr ${PATCH_VERSION} + 1)
            echo "There is already a release for the same date, increment patch_version: ${PATCH_VERSION}"
          else
            PATCH_VERSION=1
          fi

          VERSION="${PREFIX}_${PATCH_VERSION}"

          echo ::set-output name=version::${VERSION}
          echo "Version set to ${VERSION}"
      env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          VERSION_PREFIX: "v"
          TZ: "Asia/Tokyo"
    - uses: release-drafter/release-drafter@v5
      with:
          tag: ${{ steps.calver.outputs.version }}
          name: ${{ steps.calver.outputs.version }}
          version: ${{ steps.calver.outputs.version }}
      env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Publish release to Github
      uses: marvinpinto/action-automatic-releases@latest
      with:
        repo_token: "${{ secrets.GITHUB_TOKEN }}"
        automatic_release_tag: Transcript-Latest ${{ steps.calver.outputs.version }}
        prerelease: false
        title: Transcript_Latest_${{ env.NOW }}
        files: |
          ${{ steps.sign_standard.outputs.signedReleaseFile }}
          ${{ steps.sign_quest.outputs.signedReleaseFile }}
      env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}


